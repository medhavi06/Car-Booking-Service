// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	models "cab-booking-system/models"

	mock "github.com/stretchr/testify/mock"
)

// IRiderInterface is an autogenerated mock type for the IRiderInterface type
type IRiderInterface struct {
	mock.Mock
}

// AddRider provides a mock function with given fields: id, name, phone, email
func (_m *IRiderInterface) AddRider(id string, name string, phone string, email string) error {
	ret := _m.Called(id, name, phone, email)

	if len(ret) == 0 {
		panic("no return value specified for AddRider")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(id, name, phone, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetRider provides a mock function with given fields: id
func (_m *IRiderInterface) GetRider(id string) (*models.Rider, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetRider")
	}

	var r0 *models.Rider
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Rider, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Rider); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Rider)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadRiderHistory provides a mock function with given fields: id
func (_m *IRiderInterface) LoadRiderHistory(id string) {
	_m.Called(id)
}

// RateDriver provides a mock function with no fields
func (_m *IRiderInterface) RateDriver() {
	_m.Called()
}

// NewIRiderInterface creates a new instance of IRiderInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRiderInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRiderInterface {
	mock := &IRiderInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
