// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	models "cab-booking-system/models"

	mock "github.com/stretchr/testify/mock"
)

// ITripRepository is an autogenerated mock type for the ITripRepository type
type ITripRepository struct {
	mock.Mock
}

// CreateTrip provides a mock function with given fields: riderID, cabID, sourceLocation, destinationLocation
func (_m *ITripRepository) CreateTrip(riderID string, cabID string, sourceLocation models.Location, destinationLocation models.Location) (*models.Trip, error) {
	ret := _m.Called(riderID, cabID, sourceLocation, destinationLocation)

	if len(ret) == 0 {
		panic("no return value specified for CreateTrip")
	}

	var r0 *models.Trip
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, models.Location, models.Location) (*models.Trip, error)); ok {
		return rf(riderID, cabID, sourceLocation, destinationLocation)
	}
	if rf, ok := ret.Get(0).(func(string, string, models.Location, models.Location) *models.Trip); ok {
		r0 = rf(riderID, cabID, sourceLocation, destinationLocation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Trip)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, models.Location, models.Location) error); ok {
		r1 = rf(riderID, cabID, sourceLocation, destinationLocation)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EndTrip provides a mock function with given fields: tripID
func (_m *ITripRepository) EndTrip(tripID string) error {
	ret := _m.Called(tripID)

	if len(ret) == 0 {
		panic("no return value specified for EndTrip")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(tripID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTripsByRider provides a mock function with given fields: riderID
func (_m *ITripRepository) GetAllTripsByRider(riderID string) ([]*models.Trip, error) {
	ret := _m.Called(riderID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTripsByRider")
	}

	var r0 []*models.Trip
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*models.Trip, error)); ok {
		return rf(riderID)
	}
	if rf, ok := ret.Get(0).(func(string) []*models.Trip); ok {
		r0 = rf(riderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Trip)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(riderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrip provides a mock function with given fields: tripID
func (_m *ITripRepository) GetTrip(tripID string) (*models.Trip, error) {
	ret := _m.Called(tripID)

	if len(ret) == 0 {
		panic("no return value specified for GetTrip")
	}

	var r0 *models.Trip
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Trip, error)); ok {
		return rf(tripID)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Trip); ok {
		r0 = rf(tripID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Trip)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tripID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewITripRepository creates a new instance of ITripRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewITripRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ITripRepository {
	mock := &ITripRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
