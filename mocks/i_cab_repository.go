// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	models "cab-booking-system/models"

	mock "github.com/stretchr/testify/mock"
)

// ICabRepository is an autogenerated mock type for the ICabRepository type
type ICabRepository struct {
	mock.Mock
}

// AddCab provides a mock function with given fields: id, number, driverName, phoneNumber
func (_m *ICabRepository) AddCab(id string, number string, driverName string, phoneNumber string) error {
	ret := _m.Called(id, number, driverName, phoneNumber)

	if len(ret) == 0 {
		panic("no return value specified for AddCab")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(id, number, driverName, phoneNumber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAvailableCabsNearby provides a mock function with given fields: loc, radiusKm
func (_m *ICabRepository) GetAvailableCabsNearby(loc models.Location, radiusKm float64) ([]*models.Cab, error) {
	ret := _m.Called(loc, radiusKm)

	if len(ret) == 0 {
		panic("no return value specified for GetAvailableCabsNearby")
	}

	var r0 []*models.Cab
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Location, float64) ([]*models.Cab, error)); ok {
		return rf(loc, radiusKm)
	}
	if rf, ok := ret.Get(0).(func(models.Location, float64) []*models.Cab); ok {
		r0 = rf(loc, radiusKm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Cab)
		}
	}

	if rf, ok := ret.Get(1).(func(models.Location, float64) error); ok {
		r1 = rf(loc, radiusKm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCab provides a mock function with given fields: id
func (_m *ICabRepository) GetCab(id string) (*models.Cab, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetCab")
	}

	var r0 *models.Cab
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Cab, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Cab); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Cab)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetCurrentTripID provides a mock function with given fields: cabID, tripID
func (_m *ICabRepository) SetCurrentTripID(cabID string, tripID string) error {
	ret := _m.Called(cabID, tripID)

	if len(ret) == 0 {
		panic("no return value specified for SetCurrentTripID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(cabID, tripID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLocation provides a mock function with given fields: cabID, location
func (_m *ICabRepository) UpdateLocation(cabID string, location *models.Location) error {
	ret := _m.Called(cabID, location)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLocation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *models.Location) error); ok {
		r0 = rf(cabID, location)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewICabRepository creates a new instance of ICabRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICabRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICabRepository {
	mock := &ICabRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
